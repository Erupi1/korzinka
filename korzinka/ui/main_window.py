from PyQt5.QtWidgets import (QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QPushButton, QLabel, QStackedWidget, QSizePolicy, QFileDialog, QMessageBox)
from PyQt5.QtGui import QPixmap
from PyQt5.QtCore import Qt
import os
from ui.product_table_widget import ProductTableWidget
from dialogs.add_product_dialog import AddProductDialog
from ui.expired_products_widget import ExpiredProductsWidget
from ui.removed_products_widget import RemovedProductsWidget
from dialogs.user_management_dialog import UserManagementDialog
from dialogs.change_password_dialog import ChangePasswordDialog
import openpyxl
from db import ProductDB

class MainWindow(QMainWindow):
    def __init__(self, user_info):
        super().__init__()
        self.user_info = user_info
        self.setWindowTitle('Korzinka ‚Äî –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ä–æ–∫–æ–≤ –≥–æ–¥–Ω–æ—Å—Ç–∏')
        self.setMinimumSize(900, 600)
        self.init_ui()
        self.show_expiring_soon_popup()  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º pop-up –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ UI

    def init_ui(self):
        main_widget = QWidget()
        main_layout = QHBoxLayout()
        # --- Sidebar ---
        sidebar = QVBoxLayout()
        sidebar.setSpacing(10)
        sidebar.setAlignment(Qt.AlignTop)
        # –ö–Ω–æ–ø–∫–∏ sidebar (–∏–∫–æ–Ω–∫–∏ –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ png)
        self.btn_main = QPushButton('üè† –ì–ª–∞–≤–Ω–∞—è')
        self.btn_expired = QPushButton('‚è∞ –ü—Ä–æ—Å—Ä–æ—á–∫–∞')
        self.btn_expired.setObjectName('btn_expired')
        self.btn_add = QPushButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å')
        self.btn_import = QPushButton('üì• –ò–º–ø–æ—Ä—Ç')
        self.btn_export = QPushButton('üì§ –≠–∫—Å–ø–æ—Ä—Ç')
        self.btn_remove = QPushButton('üóëÔ∏è –°–Ω—è—Ç—å —Å –ø–æ–ª–∫–∏')
        self.btn_history = QPushButton('üìú –ò—Å—Ç–æ—Ä–∏—è')
        self.btn_password = QPushButton('üîë –ü–∞—Ä–æ–ª—å')
        self.btn_users = QPushButton('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏')
        # –¢–æ–ª—å–∫–æ –¥–ª—è admin
        if self.user_info['role'] == 'admin':
            sidebar.addWidget(self.btn_users)
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        for btn in [self.btn_main, self.btn_expired, self.btn_add, self.btn_import, self.btn_export, self.btn_remove, self.btn_history, self.btn_password, self.btn_users]:
            sidebar.addWidget(btn)
        sidebar.addStretch()
        # --- –û—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–±–æ—á–∞—è –æ–±–ª–∞—Å—Ç—å ---
        self.stack = QStackedWidget()
        # –°—Ç—Ä–∞–Ω–∏—Ü–∞ "–ì–ª–∞–≤–Ω–∞—è" —Å —Ç–∞–±–ª–∏—Ü–µ–π —Ç–æ–≤–∞—Ä–æ–≤
        self.page_main = QWidget()
        main_layout_page = QVBoxLayout()
        self.product_table = ProductTableWidget()
        main_layout_page.addWidget(self.product_table)
        self.page_main.setLayout(main_layout_page)
        # –°—Ç—Ä–∞–Ω–∏—Ü–∞ "–ü—Ä–æ—Å—Ä–æ—á–∫–∞" —Å —Ç–∞–±–ª–∏—Ü–µ–π –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        self.page_expired = ExpiredProductsWidget(update_expired_count_callback=self.update_expired_count)
        # –°—Ç—Ä–∞–Ω–∏—Ü–∞ "–ò—Å—Ç–æ—Ä–∏—è" —Å–Ω—è—Ç—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        self.page_history = RemovedProductsWidget(is_admin=self.user_info['role'] == 'admin')
        self.stack.addWidget(self.page_main)
        self.stack.addWidget(self.page_expired)
        self.stack.addWidget(self.page_history)
        # --- –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å ---
        top_panel = QHBoxLayout()
        logo_path = os.path.join('resources', 'logo.png')
        logo = QLabel()
        if os.path.exists(logo_path):
            pixmap = QPixmap(logo_path)
            logo.setPixmap(pixmap.scaled(40, 40, Qt.KeepAspectRatio, Qt.SmoothTransformation))
        else:
            logo.setText('üõí')
            logo.setFixedSize(40, 40)
            logo.setAlignment(Qt.AlignCenter)
        title = QLabel('–ö–æ—Ä–∑–∏–Ω–∫–∞ ‚Äî –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ä–æ–∫–æ–≤ –≥–æ–¥–Ω–æ—Å—Ç–∏')
        title.setProperty('role', 'title')
        title.setStyleSheet('font-size: 20px; font-weight: bold;')
        top_panel.addWidget(logo)
        top_panel.addSpacing(10)
        top_panel.addWidget(title)
        top_panel.addStretch()
        # --- –ö–æ–º–ø–æ–Ω–æ–≤–∫–∞ ---
        content_layout = QVBoxLayout()
        content_layout.addLayout(top_panel)
        content_layout.addWidget(self.stack)
        main_layout.addLayout(sidebar, 1)
        main_layout.addLayout(content_layout, 6)
        main_widget.setLayout(main_layout)
        self.setCentralWidget(main_widget)
        # --- –°–∏–≥–Ω–∞–ª—ã ---
        self.btn_main.clicked.connect(lambda: self.stack.setCurrentWidget(self.page_main))
        self.btn_expired.clicked.connect(lambda: self.stack.setCurrentWidget(self.page_expired))
        self.btn_add.clicked.connect(self.open_add_product_dialog)
        self.btn_history.clicked.connect(lambda: (self.page_history.load_data(), self.stack.setCurrentWidget(self.page_history)))
        self.btn_import.clicked.connect(self.import_products)
        self.btn_export.clicked.connect(self.export_products)
        self.btn_users.clicked.connect(self.open_user_management)
        self.btn_password.clicked.connect(self.open_change_password)
        self.update_expired_count()

    def update_expired_count(self):
        db = ProductDB()
        from PyQt5.QtCore import QDate
        today = QDate.currentDate().toString('yyyy-MM-dd')
        count = len(db.get_expired_products(today))
        if count > 0:
            self.btn_expired.setText(f'‚è∞ –ü—Ä–æ—Å—Ä–æ—á–∫–∞ ({count})')
        else:
            self.btn_expired.setText('‚è∞ –ü—Ä–æ—Å—Ä–æ—á–∫–∞')

    def open_add_product_dialog(self):
        dialog = AddProductDialog(self)
        if dialog.exec_() == AddProductDialog.Accepted:
            self.product_table.load_data()
            self.page_expired.load_data()
            self.update_expired_count()

    def open_user_management(self):
        dialog = UserManagementDialog(self)
        dialog.exec_()

    def open_change_password(self):
        dialog = ChangePasswordDialog(self.user_info['id'], self)
        dialog.exec_()

    def import_products(self):
        path, _ = QFileDialog.getOpenFileName(self, '–í—ã–±–µ—Ä–∏—Ç–µ Excel-—Ñ–∞–π–ª', '', 'Excel Files (*.xlsx)')
        if not path:
            return
        try:
            wb = openpyxl.load_workbook(path)
            ws = wb.active
            db = ProductDB()
            count = 0
            for i, row in enumerate(ws.iter_rows(min_row=2, values_only=True)):
                name, barcode, production_date, expiry_date, quantity, remind_date = row[:6]
                if not name or not production_date or not expiry_date or not quantity or not remind_date:
                    continue
                db.add_product(str(name), str(barcode) if barcode else None, str(production_date), str(expiry_date), int(quantity), str(remind_date))
                count += 1
            QMessageBox.information(self, '–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω', f'–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {count}')
            self.product_table.load_data()
            self.page_expired.load_data()
            self.update_expired_count()
        except Exception as e:
            QMessageBox.critical(self, '–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞', str(e))

    def export_products(self):
        db = ProductDB()
        products = db.get_all_products()
        if not products:
            QMessageBox.information(self, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö', '–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.')
            return
        path, _ = QFileDialog.getSaveFileName(self, '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫', 'products.xlsx', 'Excel Files (*.xlsx)')
        if not path:
            return
        wb = openpyxl.Workbook()
        ws = wb.active
        ws.append(['ID', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–®—Ç—Ä–∏—Ö–∫–æ–¥', '–î–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞', '–°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–î–∞—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è'])
        for p in products:
            ws.append(list(p[:7]))
        wb.save(path)
        QMessageBox.information(self, '–£—Å–ø–µ—Ö', f'–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ {path}')

    def create_page(self, title, text, red=False):
        page = QWidget()
        layout = QVBoxLayout()
        label = QLabel(title)
        label.setStyleSheet(f'font-size: 18px; font-weight: bold; {"color: red;" if red else ""}')
        layout.addWidget(label)
        layout.addWidget(QLabel(text))
        layout.addStretch()
        page.setLayout(layout)
        return page

    def show_expiring_soon_popup(self):
        from PyQt5.QtCore import QDate
        db = ProductDB()
        today = QDate.currentDate().toString('yyyy-MM-dd')
        days = 7  # –ú–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        products = db.get_products_expiring_soon(today, days)
        if products:
            msg = '\n'.join([
                f"{p[1]} (—à—Ç—Ä–∏—Ö–∫–æ–¥: {p[2] or '-'}), —Å—Ä–æ–∫ –¥–æ: {p[4]}" for p in products
            ])
            QMessageBox.warning(self, f'–¢–æ–≤–∞—Ä—ã —Å –∏—Å—Ç–µ–∫–∞—é—â–∏–º —Å—Ä–æ–∫–æ–º (–¥–æ {days} –¥–Ω–µ–π)', msg) 